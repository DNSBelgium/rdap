ext {
  guava_version = '15.0'
  slf4j_version = '1.7.5'
  jackson_version = '2.9.8'
  spring_version = '5.1.6.RELEASE'

  lib = [
      commons_cli: 'commons-cli:commons-cli:1.2',
      icu4j: 'com.ibm.icu:icu4j:51.1',
      guava: "com.google.guava:guava:${guava_version}",
      commons_lang: 'commons-lang:commons-lang:2.6',
      httpclient: 'org.apache.httpcomponents:httpclient:4.3.1',
      servlet_api: 'javax.servlet:javax.servlet-api:3.1.0',
      joda_time: 'joda-time:joda-time:2.3',
      junit: 'junit:junit:4.12',
      dnsjava: 'dnsjava:dnsjava:2.1.1',
      slf4j: "org.slf4j:slf4j-api:${slf4j_version}",
      jackson: ["com.fasterxml.jackson.core:jackson-core:${jackson_version}","com.fasterxml.jackson.core:jackson-databind:${jackson_version}"],
      mockito: 'org.mockito:mockito-all:1.9.5',
      jsonpath: 'com.jayway.jsonpath:json-path:2.4.0',
      spring_core: "org.springframework:spring-core:${spring_version}",
      spring_aop: "org.springframework:spring-aop:${spring_version}",
      spring_context: "org.springframework:spring-context:${spring_version}",
      spring_context_support: "org.springframework:spring-context-support:${spring_version}",
      spring_beans: "org.springframework:spring-beans:${spring_version}",
      spring_oxm: "org.springframework:spring-oxm:${spring_version}",
      spring_expression: "org.springframework:spring-expression:${spring_version}",
      spring_webmvc: "org.springframework:spring-webmvc:${spring_version}",
      spring_web: "org.springframework:spring-web:${spring_version}",
      spring_test: "org.springframework:spring-test:${spring_version}",
      groovy: 'org.codehaus.groovy:groovy:2.2.1',
      yaml: 'org.yaml:snakeyaml:1.15'
  ]
}

allprojects {
  group 'be.dnsbelgium'
  version = '2.0.0-SNAPSHOT'
}

subprojects {

  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'signing'

  sourceCompatibility = targetCompatibility = '1.8'

  repositories {
    mavenCentral()
  }

  dependencies {
    testCompile lib.junit, lib.mockito
  }

  test {
    //forkEvery = 5
    //maxParallelForks = Runtime.runtime.availableProcessors() - 1
    systemProperties 'file.encoding': 'UTF-8'
    testLogging {
      //exceptionFormat "full"
      //events 'started', 'passed', 'skipped', 'failed'
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    //options.compilerArgs << "-Xlint:all"
  }

  signing {
    if (signing()) {
      sign configurations.archives
    }
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  apply plugin: 'maven'

  uploadArchives {
    repositories {
      mavenDeployer {

        beforeDeployment { MavenDeployment deployment ->
          if (signing()){
            signing.signPom(deployment)
          }
        }

        repository(url: sonatype_staging_url) {
          authentication(userName: sonatype_username, password: sonatype_password)
        }

        pom.project {

          name 'RDAP ' + project.name
          packaging 'jar'
          description 'RDAP implementation'
          url 'https://github.com/DNSBelgium/rdap'

          scm {
            url 'scm:git@github.com:DNSBelgium/rdap.git'
            connection 'scm:git@github.com:DNSBelgium/rdap.git'
            developerConnection 'scm:git@github.com:DNSBelgium/rdap.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'johanheylen'
              name 'Johan Heylen'
            }
            developer {
              id 'stoal'
              name 'Stijn Niclaes'
            }
            developer {
              id 'vandepitte'
              name 'Pieter Vandepitte'
            }
          }
        }
      }
    }
  }
}
boolean signing() {
  return project.hasProperty("signing.keyId")
}


buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies { classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1" }
}

// To apply a third-party plugin from an external build script,
// you have to use the plugin's fully qualified class name, rather than its ID
apply plugin: org.sonarqube.gradle.SonarQubePlugin
