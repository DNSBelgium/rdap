plugins {
    id 'java'
    id 'net.researchgate.release' version '3.0.2'
    id "org.sonarqube" version "2.7.1"
    id 'io.codearte.nexus-staging' version '0.30.0'
}

ext {
    guava_version = '32.1.2-jre'
    slf4j_version = '2.0.9'
    jackson_version = '2.15.2'
    spring_version = '5.3.30'

    lib = [
            commons_cli           : 'commons-cli:commons-cli:1.2',
            icu4j                 : 'com.ibm.icu:icu4j:73.2',
            guava                 : "com.google.guava:guava:${guava_version}",
            commons_lang          : 'org.apache.commons:commons-lang3:3.13.0',
            httpclient            : 'org.apache.httpcomponents:httpclient:4.3.1',
            servlet_api           : 'javax.servlet:javax.servlet-api:4.0.1',
            joda_time             : 'joda-time:joda-time:2.12.5',
            junit                 : 'junit:junit:4.13.2',
            slf4j                 : "org.slf4j:slf4j-api:${slf4j_version}",
            jackson               : ["com.fasterxml.jackson.core:jackson-core:${jackson_version}", "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"],
            mockito               : 'org.mockito:mockito-core:5.5.0',
            jsonpath              : 'com.jayway.jsonpath:json-path:2.8.0',
            spring_core           : "org.springframework:spring-core:${spring_version}",
            spring_aop            : "org.springframework:spring-aop:${spring_version}",
            spring_context        : "org.springframework:spring-context:${spring_version}",
            spring_context_support: "org.springframework:spring-context-support:${spring_version}",
            spring_beans          : "org.springframework:spring-beans:${spring_version}",
            spring_oxm            : "org.springframework:spring-oxm:${spring_version}",
            spring_expression     : "org.springframework:spring-expression:${spring_version}",
            spring_webmvc         : "org.springframework:spring-webmvc:${spring_version}",
            spring_web            : "org.springframework:spring-web:${spring_version}",
            spring_test           : "org.springframework:spring-test:${spring_version}",
            groovy                : 'org.codehaus.groovy:groovy:3.0.19',
            yaml                  : 'org.yaml:snakeyaml:2.2'
    ]
}

allprojects {
    group 'be.dnsbelgium'
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    repositories {
        mavenCentral()
    }

    test {
        //forkEvery = 5
        //maxParallelForks = Runtime.runtime.availableProcessors() - 1
        systemProperties 'file.encoding': 'UTF-8'
        testLogging {
            //exceptionFormat "full"
            //events 'started', 'passed', 'skipped', 'failed'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        //options.compilerArgs << "-Xlint:all"
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    nexusStaging {
        username sonatype_username
        password sonatype_password
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        repositories {
//            maven {
//                name = 'localFileRepo'
//                url = "file://${buildDir}/repo"
//            }

            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

                name = 'sonatype'
                url = version.endsWith('SNAPSHOT')  ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = sonatype_username
                    password = sonatype_password
                }
            }

        }

        publications {
            myLibrary(MavenPublication) {
                from components.java

                pom {
                    name = 'RDAP ' + project.name
                    description = 'RDAP implementation'
                    url = 'https://github.com/DNSBelgium/rdap'

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'dnsbelgium'
                            name = 'DNS Belgium Engineering'
                            email = 'engineering@dnsbelgium.be'
                            organization = 'DNS Belgium'
                            organizationUrl = 'https://www.dnsbelgium.be'
                        }
                    }

                    scm {
                        connection = 'scm:git@github.com:DNSBelgium/rdap.git'
                        developerConnection = 'scm:git@github.com:DNSBelgium/rdap.git'
                        url = 'scm:git@github.com:DNSBelgium/rdap.git'
                    }

                }
            }
        }
    }

    signing {
        def signingKeyId = signingKeyId
        def signingKey = signingKey
        def signingPassword = signingPassword
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign publishing.publications
    }

    release {
        git {
            requireBranch.set('master')
        }
    }

    afterReleaseBuild.dependsOn publish

}
